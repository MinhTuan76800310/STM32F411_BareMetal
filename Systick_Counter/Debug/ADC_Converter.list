
ADC_Converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001320  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080014c0  080014c0  000024c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001508  08001508  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001508  08001508  00002508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001510  08001510  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001510  08001510  00002510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001514  08001514  00002514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001518  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001574  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001574  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000119b  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005cd  00000000  00000000  00004221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  000047f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000110  00000000  00000000  00004980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc34  00000000  00000000  00004a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024c5  00000000  00000000  000146c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055388  00000000  00000000  00016b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006bf11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c50  00000000  00000000  0006bf54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0006cba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014a8 	.word	0x080014a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080014a8 	.word	0x080014a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_init>:
 *
 */
#include "adc.h"

void pa1_adc_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	// Enable clock access for GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b13      	ldr	r3, [pc, #76]	@ (80002d4 <pa1_adc_init+0x54>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a12      	ldr	r2, [pc, #72]	@ (80002d4 <pa1_adc_init+0x54>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
	// Set the mode of PA1 to analog
	GPIOA->MODER |= (1U<<2);
 8000290:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <pa1_adc_init+0x58>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <pa1_adc_init+0x58>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 800029c:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <pa1_adc_init+0x58>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0d      	ldr	r2, [pc, #52]	@ (80002d8 <pa1_adc_init+0x58>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]

	// Configure ADC module
	// Enable clock access for ADC
	RCC->APB2ENR |= ADC1EN;
 80002a8:	4b0a      	ldr	r3, [pc, #40]	@ (80002d4 <pa1_adc_init+0x54>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ac:	4a09      	ldr	r2, [pc, #36]	@ (80002d4 <pa1_adc_init+0x54>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002b2:	6453      	str	r3, [r2, #68]	@ 0x44
	// Configure ADC parameters
	// Conversion sequence start channel
	ADC1->SQR3 = ADC_CH1;
 80002b4:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <pa1_adc_init+0x5c>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	635a      	str	r2, [r3, #52]	@ 0x34
	// Conversion sequence length
	ADC1->SQR1  = ADC_SEQ_LEN_1;
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <pa1_adc_init+0x5c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Enable ADC module
	ADC1->CR2 |= CR2_ADON;
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <pa1_adc_init+0x5c>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a05      	ldr	r2, [pc, #20]	@ (80002dc <pa1_adc_init+0x5c>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6093      	str	r3, [r2, #8]

}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40012000 	.word	0x40012000

080002e0 <start_conversion>:

void start_conversion(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	ADC1->CR2 |= CR2_SWSTART;
 80002e4:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <start_conversion+0x18>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a03      	ldr	r2, [pc, #12]	@ (80002f8 <start_conversion+0x18>)
 80002ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002ee:	6093      	str	r3, [r2, #8]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40012000 	.word	0x40012000

080002fc <adc_read>:

uint32_t adc_read(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	// Wait for conversion complete
	while(!(ADC1->SR & SR_EOC))
 8000300:	bf00      	nop
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <adc_read+0x20>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f003 0302 	and.w	r3, r3, #2
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <adc_read+0x6>
	{
	}
	// Read data
	return ADC1->DR;
 800030e:	4b03      	ldr	r3, [pc, #12]	@ (800031c <adc_read+0x20>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000312:	4618      	mov	r0, r3
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40012000 	.word	0x40012000

08000320 <main>:
#include <stdio.h>

uint32_t Sensor_Value;

int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 8000324:	f000 f8b6 	bl	8000494 <uart2_rxtx_init>
	pa1_adc_init();
 8000328:	f7ff ffaa 	bl	8000280 <pa1_adc_init>

	while(1)
	{
		start_conversion();
 800032c:	f7ff ffd8 	bl	80002e0 <start_conversion>
		Sensor_Value = adc_read();
 8000330:	f7ff ffe4 	bl	80002fc <adc_read>
 8000334:	4603      	mov	r3, r0
 8000336:	4a05      	ldr	r2, [pc, #20]	@ (800034c <main+0x2c>)
 8000338:	6013      	str	r3, [r2, #0]
		printf("Sensor value: %d /n", (int)Sensor_Value);
 800033a:	4b04      	ldr	r3, [pc, #16]	@ (800034c <main+0x2c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4619      	mov	r1, r3
 8000340:	4803      	ldr	r0, [pc, #12]	@ (8000350 <main+0x30>)
 8000342:	f000 fa49 	bl	80007d8 <iprintf>
		start_conversion();
 8000346:	bf00      	nop
 8000348:	e7f0      	b.n	800032c <main+0xc>
 800034a:	bf00      	nop
 800034c:	20000078 	.word	0x20000078
 8000350:	080014c0 	.word	0x080014c0

08000354 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]
 8000364:	e00a      	b.n	800037c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000366:	f3af 8000 	nop.w
 800036a:	4601      	mov	r1, r0
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	60ba      	str	r2, [r7, #8]
 8000372:	b2ca      	uxtb	r2, r1
 8000374:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	3301      	adds	r3, #1
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	697a      	ldr	r2, [r7, #20]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	429a      	cmp	r2, r3
 8000382:	dbf0      	blt.n	8000366 <_read+0x12>
  }

  return len;
 8000384:	687b      	ldr	r3, [r7, #4]
}
 8000386:	4618      	mov	r0, r3
 8000388:	3718      	adds	r7, #24
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b086      	sub	sp, #24
 8000392:	af00      	add	r7, sp, #0
 8000394:	60f8      	str	r0, [r7, #12]
 8000396:	60b9      	str	r1, [r7, #8]
 8000398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
 800039e:	e009      	b.n	80003b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	60ba      	str	r2, [r7, #8]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f91d 	bl	80005e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	3301      	adds	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
 80003b4:	697a      	ldr	r2, [r7, #20]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	dbf1      	blt.n	80003a0 <_write+0x12>
  }
  return len;
 80003bc:	687b      	ldr	r3, [r7, #4]
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3718      	adds	r7, #24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <_close>:

int _close(int file)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003ec:	605a      	str	r2, [r3, #4]
  return 0;
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr

080003fa <_isatty>:

int _isatty(int file)
{
 80003fa:	b480      	push	{r7}
 80003fc:	b083      	sub	sp, #12
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000402:	2301      	movs	r3, #1
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr

0800040e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800040e:	b480      	push	{r7}
 8000410:	b085      	sub	sp, #20
 8000412:	af00      	add	r7, sp, #0
 8000414:	60f8      	str	r0, [r7, #12]
 8000416:	60b9      	str	r1, [r7, #8]
 8000418:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	3714      	adds	r7, #20
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
	...

08000428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000430:	4a14      	ldr	r2, [pc, #80]	@ (8000484 <_sbrk+0x5c>)
 8000432:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <_sbrk+0x60>)
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800043c:	4b13      	ldr	r3, [pc, #76]	@ (800048c <_sbrk+0x64>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d102      	bne.n	800044a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000444:	4b11      	ldr	r3, [pc, #68]	@ (800048c <_sbrk+0x64>)
 8000446:	4a12      	ldr	r2, [pc, #72]	@ (8000490 <_sbrk+0x68>)
 8000448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800044a:	4b10      	ldr	r3, [pc, #64]	@ (800048c <_sbrk+0x64>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	693a      	ldr	r2, [r7, #16]
 8000454:	429a      	cmp	r2, r3
 8000456:	d207      	bcs.n	8000468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000458:	f000 fa62 	bl	8000920 <__errno>
 800045c:	4603      	mov	r3, r0
 800045e:	220c      	movs	r2, #12
 8000460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000462:	f04f 33ff 	mov.w	r3, #4294967295
 8000466:	e009      	b.n	800047c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000468:	4b08      	ldr	r3, [pc, #32]	@ (800048c <_sbrk+0x64>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800046e:	4b07      	ldr	r3, [pc, #28]	@ (800048c <_sbrk+0x64>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4413      	add	r3, r2
 8000476:	4a05      	ldr	r2, [pc, #20]	@ (800048c <_sbrk+0x64>)
 8000478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800047a:	68fb      	ldr	r3, [r7, #12]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20020000 	.word	0x20020000
 8000488:	00000400 	.word	0x00000400
 800048c:	2000007c 	.word	0x2000007c
 8000490:	200001d0 	.word	0x200001d0

08000494 <uart2_rxtx_init>:
	// Enable UART
	USART2->CR1 |= CR1_UE;
}

void uart2_rxtx_init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	// Enable clock access for GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000498:	4b32      	ldr	r3, [pc, #200]	@ (8000564 <uart2_rxtx_init+0xd0>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	4a31      	ldr	r2, [pc, #196]	@ (8000564 <uart2_rxtx_init+0xd0>)
 800049e:	f043 0301 	orr.w	r3, r3, #1
 80004a2:	6313      	str	r3, [r2, #48]	@ 0x30
	// Set pin PA2 is alternate function mode
	GPIOA->MODER &= ~(1U<<4);
 80004a4:	4b30      	ldr	r3, [pc, #192]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a2f      	ldr	r2, [pc, #188]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004aa:	f023 0310 	bic.w	r3, r3, #16
 80004ae:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a2c      	ldr	r2, [pc, #176]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004b6:	f043 0320 	orr.w	r3, r3, #32
 80004ba:	6013      	str	r3, [r2, #0]
	// Set alternate type of PA2 is USART2 (AF07)
	GPIOA->AFR[0] |= (1U<<8);
 80004bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004be:	6a1b      	ldr	r3, [r3, #32]
 80004c0:	4a29      	ldr	r2, [pc, #164]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80004c8:	4b27      	ldr	r3, [pc, #156]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004ca:	6a1b      	ldr	r3, [r3, #32]
 80004cc:	4a26      	ldr	r2, [pc, #152]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80004d4:	4b24      	ldr	r3, [pc, #144]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004d6:	6a1b      	ldr	r3, [r3, #32]
 80004d8:	4a23      	ldr	r2, [pc, #140]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80004e0:	4b21      	ldr	r3, [pc, #132]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004e2:	6a1b      	ldr	r3, [r3, #32]
 80004e4:	4a20      	ldr	r2, [pc, #128]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80004ea:	6213      	str	r3, [r2, #32]

	// Set pin PA3 is alternate function mode
	GPIOA->MODER &= ~(1U<<6);
 80004ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80004f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000568 <uart2_rxtx_init+0xd4>)
 80004fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000502:	6013      	str	r3, [r2, #0]
	// Set alternate type of PA3 is USART2 (AF07)
	GPIOA->AFR[0] |= (1U<<12);
 8000504:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <uart2_rxtx_init+0xd4>)
 8000506:	6a1b      	ldr	r3, [r3, #32]
 8000508:	4a17      	ldr	r2, [pc, #92]	@ (8000568 <uart2_rxtx_init+0xd4>)
 800050a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800050e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000510:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <uart2_rxtx_init+0xd4>)
 8000512:	6a1b      	ldr	r3, [r3, #32]
 8000514:	4a14      	ldr	r2, [pc, #80]	@ (8000568 <uart2_rxtx_init+0xd4>)
 8000516:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800051a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 800051c:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <uart2_rxtx_init+0xd4>)
 800051e:	6a1b      	ldr	r3, [r3, #32]
 8000520:	4a11      	ldr	r2, [pc, #68]	@ (8000568 <uart2_rxtx_init+0xd4>)
 8000522:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000526:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <uart2_rxtx_init+0xd4>)
 800052a:	6a1b      	ldr	r3, [r3, #32]
 800052c:	4a0e      	ldr	r2, [pc, #56]	@ (8000568 <uart2_rxtx_init+0xd4>)
 800052e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000532:	6213      	str	r3, [r2, #32]

	// Enable clock access for USART2
	RCC->APB1ENR |= USART2EN;
 8000534:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <uart2_rxtx_init+0xd0>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000538:	4a0a      	ldr	r2, [pc, #40]	@ (8000564 <uart2_rxtx_init+0xd0>)
 800053a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800053e:	6413      	str	r3, [r2, #64]	@ 0x40
	// Configure baudrate for USART2
	uart_set_baudrate(USART2, APB1_CLK, 115200);
 8000540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000544:	4909      	ldr	r1, [pc, #36]	@ (800056c <uart2_rxtx_init+0xd8>)
 8000546:	480a      	ldr	r0, [pc, #40]	@ (8000570 <uart2_rxtx_init+0xdc>)
 8000548:	f000 f826 	bl	8000598 <uart_set_baudrate>
	// Configure transfer direction
	USART2->CR1 = (CR1_TE | CR1_RE);
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <uart2_rxtx_init+0xdc>)
 800054e:	220c      	movs	r2, #12
 8000550:	60da      	str	r2, [r3, #12]

	// Enable UART
	USART2->CR1 |= CR1_UE;
 8000552:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <uart2_rxtx_init+0xdc>)
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	4a06      	ldr	r2, [pc, #24]	@ (8000570 <uart2_rxtx_init+0xdc>)
 8000558:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800055c:	60d3      	str	r3, [r2, #12]
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800
 8000568:	40020000 	.word	0x40020000
 800056c:	00f42400 	.word	0x00f42400
 8000570:	40004400 	.word	0x40004400

08000574 <calculate_baudrate>:

static uint16_t calculate_baudrate(uint32_t PeriClk, uint32_t UartBd)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	return (PeriClk + UartBd/(2U))/UartBd;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	085a      	lsrs	r2, r3, #1
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	441a      	add	r2, r3
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	fbb2 f3f3 	udiv	r3, r2, r3
 800058c:	b29b      	uxth	r3, r3
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *UARTx, uint32_t PeriClk, uint32_t UartBd)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	UARTx->BRR = (int)calculate_baudrate(PeriClk, UartBd);
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	68b8      	ldr	r0, [r7, #8]
 80005a8:	f7ff ffe4 	bl	8000574 <calculate_baudrate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	609a      	str	r2, [r3, #8]
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <uart_write>:

void uart_write(int ch)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	// Make sure the transmit data register is empty
	while(!(USART2->SR & SR_TXE)){}
 80005c4:	bf00      	nop
 80005c6:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <uart_write+0x28>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f9      	beq.n	80005c6 <uart_write+0xa>
	// Write to data register
	USART2->DR = (ch & 0xFF);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a03      	ldr	r2, [pc, #12]	@ (80005e4 <uart_write+0x28>)
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	6053      	str	r3, [r2, #4]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40004400 	.word	0x40004400

080005e8 <__io_putchar>:

// mapping print to UART
int __io_putchar(int ch)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff ffe3 	bl	80005bc <uart_write>
	return ch;
 80005f6:	687b      	ldr	r3, [r7, #4]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000602:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000604:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	@ (800063c <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	@ (8000640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	@ (8000644 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	@ (800064c <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800062e:	f000 f97d 	bl	800092c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000632:	f7ff fe75 	bl	8000320 <main>

08000636 <LoopForever>:

LoopForever:
  b LoopForever
 8000636:	e7fe      	b.n	8000636 <LoopForever>
  ldr   r0, =_estack
 8000638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000644:	08001518 	.word	0x08001518
  ldr r2, =_sbss
 8000648:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800064c:	200001cc 	.word	0x200001cc

08000650 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC_IRQHandler>
	...

08000654 <std>:
 8000654:	2300      	movs	r3, #0
 8000656:	b510      	push	{r4, lr}
 8000658:	4604      	mov	r4, r0
 800065a:	e9c0 3300 	strd	r3, r3, [r0]
 800065e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000662:	6083      	str	r3, [r0, #8]
 8000664:	8181      	strh	r1, [r0, #12]
 8000666:	6643      	str	r3, [r0, #100]	@ 0x64
 8000668:	81c2      	strh	r2, [r0, #14]
 800066a:	6183      	str	r3, [r0, #24]
 800066c:	4619      	mov	r1, r3
 800066e:	2208      	movs	r2, #8
 8000670:	305c      	adds	r0, #92	@ 0x5c
 8000672:	f000 f906 	bl	8000882 <memset>
 8000676:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <std+0x58>)
 8000678:	6263      	str	r3, [r4, #36]	@ 0x24
 800067a:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <std+0x5c>)
 800067c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <std+0x60>)
 8000680:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000682:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <std+0x64>)
 8000684:	6323      	str	r3, [r4, #48]	@ 0x30
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <std+0x68>)
 8000688:	6224      	str	r4, [r4, #32]
 800068a:	429c      	cmp	r4, r3
 800068c:	d006      	beq.n	800069c <std+0x48>
 800068e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000692:	4294      	cmp	r4, r2
 8000694:	d002      	beq.n	800069c <std+0x48>
 8000696:	33d0      	adds	r3, #208	@ 0xd0
 8000698:	429c      	cmp	r4, r3
 800069a:	d105      	bne.n	80006a8 <std+0x54>
 800069c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a4:	f000 b966 	b.w	8000974 <__retarget_lock_init_recursive>
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	080007fd 	.word	0x080007fd
 80006b0:	0800081f 	.word	0x0800081f
 80006b4:	08000857 	.word	0x08000857
 80006b8:	0800087b 	.word	0x0800087b
 80006bc:	20000080 	.word	0x20000080

080006c0 <stdio_exit_handler>:
 80006c0:	4a02      	ldr	r2, [pc, #8]	@ (80006cc <stdio_exit_handler+0xc>)
 80006c2:	4903      	ldr	r1, [pc, #12]	@ (80006d0 <stdio_exit_handler+0x10>)
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <stdio_exit_handler+0x14>)
 80006c6:	f000 b869 	b.w	800079c <_fwalk_sglue>
 80006ca:	bf00      	nop
 80006cc:	20000000 	.word	0x20000000
 80006d0:	08001209 	.word	0x08001209
 80006d4:	20000010 	.word	0x20000010

080006d8 <cleanup_stdio>:
 80006d8:	6841      	ldr	r1, [r0, #4]
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <cleanup_stdio+0x34>)
 80006dc:	4299      	cmp	r1, r3
 80006de:	b510      	push	{r4, lr}
 80006e0:	4604      	mov	r4, r0
 80006e2:	d001      	beq.n	80006e8 <cleanup_stdio+0x10>
 80006e4:	f000 fd90 	bl	8001208 <_fflush_r>
 80006e8:	68a1      	ldr	r1, [r4, #8]
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <cleanup_stdio+0x38>)
 80006ec:	4299      	cmp	r1, r3
 80006ee:	d002      	beq.n	80006f6 <cleanup_stdio+0x1e>
 80006f0:	4620      	mov	r0, r4
 80006f2:	f000 fd89 	bl	8001208 <_fflush_r>
 80006f6:	68e1      	ldr	r1, [r4, #12]
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <cleanup_stdio+0x3c>)
 80006fa:	4299      	cmp	r1, r3
 80006fc:	d004      	beq.n	8000708 <cleanup_stdio+0x30>
 80006fe:	4620      	mov	r0, r4
 8000700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000704:	f000 bd80 	b.w	8001208 <_fflush_r>
 8000708:	bd10      	pop	{r4, pc}
 800070a:	bf00      	nop
 800070c:	20000080 	.word	0x20000080
 8000710:	200000e8 	.word	0x200000e8
 8000714:	20000150 	.word	0x20000150

08000718 <global_stdio_init.part.0>:
 8000718:	b510      	push	{r4, lr}
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <global_stdio_init.part.0+0x30>)
 800071c:	4c0b      	ldr	r4, [pc, #44]	@ (800074c <global_stdio_init.part.0+0x34>)
 800071e:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <global_stdio_init.part.0+0x38>)
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	4620      	mov	r0, r4
 8000724:	2200      	movs	r2, #0
 8000726:	2104      	movs	r1, #4
 8000728:	f7ff ff94 	bl	8000654 <std>
 800072c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000730:	2201      	movs	r2, #1
 8000732:	2109      	movs	r1, #9
 8000734:	f7ff ff8e 	bl	8000654 <std>
 8000738:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800073c:	2202      	movs	r2, #2
 800073e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000742:	2112      	movs	r1, #18
 8000744:	f7ff bf86 	b.w	8000654 <std>
 8000748:	200001b8 	.word	0x200001b8
 800074c:	20000080 	.word	0x20000080
 8000750:	080006c1 	.word	0x080006c1

08000754 <__sfp_lock_acquire>:
 8000754:	4801      	ldr	r0, [pc, #4]	@ (800075c <__sfp_lock_acquire+0x8>)
 8000756:	f000 b90e 	b.w	8000976 <__retarget_lock_acquire_recursive>
 800075a:	bf00      	nop
 800075c:	200001c1 	.word	0x200001c1

08000760 <__sfp_lock_release>:
 8000760:	4801      	ldr	r0, [pc, #4]	@ (8000768 <__sfp_lock_release+0x8>)
 8000762:	f000 b909 	b.w	8000978 <__retarget_lock_release_recursive>
 8000766:	bf00      	nop
 8000768:	200001c1 	.word	0x200001c1

0800076c <__sinit>:
 800076c:	b510      	push	{r4, lr}
 800076e:	4604      	mov	r4, r0
 8000770:	f7ff fff0 	bl	8000754 <__sfp_lock_acquire>
 8000774:	6a23      	ldr	r3, [r4, #32]
 8000776:	b11b      	cbz	r3, 8000780 <__sinit+0x14>
 8000778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800077c:	f7ff bff0 	b.w	8000760 <__sfp_lock_release>
 8000780:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <__sinit+0x28>)
 8000782:	6223      	str	r3, [r4, #32]
 8000784:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <__sinit+0x2c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1f5      	bne.n	8000778 <__sinit+0xc>
 800078c:	f7ff ffc4 	bl	8000718 <global_stdio_init.part.0>
 8000790:	e7f2      	b.n	8000778 <__sinit+0xc>
 8000792:	bf00      	nop
 8000794:	080006d9 	.word	0x080006d9
 8000798:	200001b8 	.word	0x200001b8

0800079c <_fwalk_sglue>:
 800079c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007a0:	4607      	mov	r7, r0
 80007a2:	4688      	mov	r8, r1
 80007a4:	4614      	mov	r4, r2
 80007a6:	2600      	movs	r6, #0
 80007a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007ac:	f1b9 0901 	subs.w	r9, r9, #1
 80007b0:	d505      	bpl.n	80007be <_fwalk_sglue+0x22>
 80007b2:	6824      	ldr	r4, [r4, #0]
 80007b4:	2c00      	cmp	r4, #0
 80007b6:	d1f7      	bne.n	80007a8 <_fwalk_sglue+0xc>
 80007b8:	4630      	mov	r0, r6
 80007ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007be:	89ab      	ldrh	r3, [r5, #12]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d907      	bls.n	80007d4 <_fwalk_sglue+0x38>
 80007c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007c8:	3301      	adds	r3, #1
 80007ca:	d003      	beq.n	80007d4 <_fwalk_sglue+0x38>
 80007cc:	4629      	mov	r1, r5
 80007ce:	4638      	mov	r0, r7
 80007d0:	47c0      	blx	r8
 80007d2:	4306      	orrs	r6, r0
 80007d4:	3568      	adds	r5, #104	@ 0x68
 80007d6:	e7e9      	b.n	80007ac <_fwalk_sglue+0x10>

080007d8 <iprintf>:
 80007d8:	b40f      	push	{r0, r1, r2, r3}
 80007da:	b507      	push	{r0, r1, r2, lr}
 80007dc:	4906      	ldr	r1, [pc, #24]	@ (80007f8 <iprintf+0x20>)
 80007de:	ab04      	add	r3, sp, #16
 80007e0:	6808      	ldr	r0, [r1, #0]
 80007e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80007e6:	6881      	ldr	r1, [r0, #8]
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	f000 f9e7 	bl	8000bbc <_vfiprintf_r>
 80007ee:	b003      	add	sp, #12
 80007f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr
 80007f8:	2000000c 	.word	0x2000000c

080007fc <__sread>:
 80007fc:	b510      	push	{r4, lr}
 80007fe:	460c      	mov	r4, r1
 8000800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000804:	f000 f868 	bl	80008d8 <_read_r>
 8000808:	2800      	cmp	r0, #0
 800080a:	bfab      	itete	ge
 800080c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800080e:	89a3      	ldrhlt	r3, [r4, #12]
 8000810:	181b      	addge	r3, r3, r0
 8000812:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000816:	bfac      	ite	ge
 8000818:	6563      	strge	r3, [r4, #84]	@ 0x54
 800081a:	81a3      	strhlt	r3, [r4, #12]
 800081c:	bd10      	pop	{r4, pc}

0800081e <__swrite>:
 800081e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000822:	461f      	mov	r7, r3
 8000824:	898b      	ldrh	r3, [r1, #12]
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	4605      	mov	r5, r0
 800082a:	460c      	mov	r4, r1
 800082c:	4616      	mov	r6, r2
 800082e:	d505      	bpl.n	800083c <__swrite+0x1e>
 8000830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000834:	2302      	movs	r3, #2
 8000836:	2200      	movs	r2, #0
 8000838:	f000 f83c 	bl	80008b4 <_lseek_r>
 800083c:	89a3      	ldrh	r3, [r4, #12]
 800083e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000842:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000846:	81a3      	strh	r3, [r4, #12]
 8000848:	4632      	mov	r2, r6
 800084a:	463b      	mov	r3, r7
 800084c:	4628      	mov	r0, r5
 800084e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000852:	f000 b853 	b.w	80008fc <_write_r>

08000856 <__sseek>:
 8000856:	b510      	push	{r4, lr}
 8000858:	460c      	mov	r4, r1
 800085a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800085e:	f000 f829 	bl	80008b4 <_lseek_r>
 8000862:	1c43      	adds	r3, r0, #1
 8000864:	89a3      	ldrh	r3, [r4, #12]
 8000866:	bf15      	itete	ne
 8000868:	6560      	strne	r0, [r4, #84]	@ 0x54
 800086a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800086e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000872:	81a3      	strheq	r3, [r4, #12]
 8000874:	bf18      	it	ne
 8000876:	81a3      	strhne	r3, [r4, #12]
 8000878:	bd10      	pop	{r4, pc}

0800087a <__sclose>:
 800087a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800087e:	f000 b809 	b.w	8000894 <_close_r>

08000882 <memset>:
 8000882:	4402      	add	r2, r0
 8000884:	4603      	mov	r3, r0
 8000886:	4293      	cmp	r3, r2
 8000888:	d100      	bne.n	800088c <memset+0xa>
 800088a:	4770      	bx	lr
 800088c:	f803 1b01 	strb.w	r1, [r3], #1
 8000890:	e7f9      	b.n	8000886 <memset+0x4>
	...

08000894 <_close_r>:
 8000894:	b538      	push	{r3, r4, r5, lr}
 8000896:	4d06      	ldr	r5, [pc, #24]	@ (80008b0 <_close_r+0x1c>)
 8000898:	2300      	movs	r3, #0
 800089a:	4604      	mov	r4, r0
 800089c:	4608      	mov	r0, r1
 800089e:	602b      	str	r3, [r5, #0]
 80008a0:	f7ff fd91 	bl	80003c6 <_close>
 80008a4:	1c43      	adds	r3, r0, #1
 80008a6:	d102      	bne.n	80008ae <_close_r+0x1a>
 80008a8:	682b      	ldr	r3, [r5, #0]
 80008aa:	b103      	cbz	r3, 80008ae <_close_r+0x1a>
 80008ac:	6023      	str	r3, [r4, #0]
 80008ae:	bd38      	pop	{r3, r4, r5, pc}
 80008b0:	200001bc 	.word	0x200001bc

080008b4 <_lseek_r>:
 80008b4:	b538      	push	{r3, r4, r5, lr}
 80008b6:	4d07      	ldr	r5, [pc, #28]	@ (80008d4 <_lseek_r+0x20>)
 80008b8:	4604      	mov	r4, r0
 80008ba:	4608      	mov	r0, r1
 80008bc:	4611      	mov	r1, r2
 80008be:	2200      	movs	r2, #0
 80008c0:	602a      	str	r2, [r5, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	f7ff fda3 	bl	800040e <_lseek>
 80008c8:	1c43      	adds	r3, r0, #1
 80008ca:	d102      	bne.n	80008d2 <_lseek_r+0x1e>
 80008cc:	682b      	ldr	r3, [r5, #0]
 80008ce:	b103      	cbz	r3, 80008d2 <_lseek_r+0x1e>
 80008d0:	6023      	str	r3, [r4, #0]
 80008d2:	bd38      	pop	{r3, r4, r5, pc}
 80008d4:	200001bc 	.word	0x200001bc

080008d8 <_read_r>:
 80008d8:	b538      	push	{r3, r4, r5, lr}
 80008da:	4d07      	ldr	r5, [pc, #28]	@ (80008f8 <_read_r+0x20>)
 80008dc:	4604      	mov	r4, r0
 80008de:	4608      	mov	r0, r1
 80008e0:	4611      	mov	r1, r2
 80008e2:	2200      	movs	r2, #0
 80008e4:	602a      	str	r2, [r5, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	f7ff fd34 	bl	8000354 <_read>
 80008ec:	1c43      	adds	r3, r0, #1
 80008ee:	d102      	bne.n	80008f6 <_read_r+0x1e>
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	b103      	cbz	r3, 80008f6 <_read_r+0x1e>
 80008f4:	6023      	str	r3, [r4, #0]
 80008f6:	bd38      	pop	{r3, r4, r5, pc}
 80008f8:	200001bc 	.word	0x200001bc

080008fc <_write_r>:
 80008fc:	b538      	push	{r3, r4, r5, lr}
 80008fe:	4d07      	ldr	r5, [pc, #28]	@ (800091c <_write_r+0x20>)
 8000900:	4604      	mov	r4, r0
 8000902:	4608      	mov	r0, r1
 8000904:	4611      	mov	r1, r2
 8000906:	2200      	movs	r2, #0
 8000908:	602a      	str	r2, [r5, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	f7ff fd3f 	bl	800038e <_write>
 8000910:	1c43      	adds	r3, r0, #1
 8000912:	d102      	bne.n	800091a <_write_r+0x1e>
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	b103      	cbz	r3, 800091a <_write_r+0x1e>
 8000918:	6023      	str	r3, [r4, #0]
 800091a:	bd38      	pop	{r3, r4, r5, pc}
 800091c:	200001bc 	.word	0x200001bc

08000920 <__errno>:
 8000920:	4b01      	ldr	r3, [pc, #4]	@ (8000928 <__errno+0x8>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	2000000c 	.word	0x2000000c

0800092c <__libc_init_array>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	4d0d      	ldr	r5, [pc, #52]	@ (8000964 <__libc_init_array+0x38>)
 8000930:	4c0d      	ldr	r4, [pc, #52]	@ (8000968 <__libc_init_array+0x3c>)
 8000932:	1b64      	subs	r4, r4, r5
 8000934:	10a4      	asrs	r4, r4, #2
 8000936:	2600      	movs	r6, #0
 8000938:	42a6      	cmp	r6, r4
 800093a:	d109      	bne.n	8000950 <__libc_init_array+0x24>
 800093c:	4d0b      	ldr	r5, [pc, #44]	@ (800096c <__libc_init_array+0x40>)
 800093e:	4c0c      	ldr	r4, [pc, #48]	@ (8000970 <__libc_init_array+0x44>)
 8000940:	f000 fdb2 	bl	80014a8 <_init>
 8000944:	1b64      	subs	r4, r4, r5
 8000946:	10a4      	asrs	r4, r4, #2
 8000948:	2600      	movs	r6, #0
 800094a:	42a6      	cmp	r6, r4
 800094c:	d105      	bne.n	800095a <__libc_init_array+0x2e>
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f855 3b04 	ldr.w	r3, [r5], #4
 8000954:	4798      	blx	r3
 8000956:	3601      	adds	r6, #1
 8000958:	e7ee      	b.n	8000938 <__libc_init_array+0xc>
 800095a:	f855 3b04 	ldr.w	r3, [r5], #4
 800095e:	4798      	blx	r3
 8000960:	3601      	adds	r6, #1
 8000962:	e7f2      	b.n	800094a <__libc_init_array+0x1e>
 8000964:	08001510 	.word	0x08001510
 8000968:	08001510 	.word	0x08001510
 800096c:	08001510 	.word	0x08001510
 8000970:	08001514 	.word	0x08001514

08000974 <__retarget_lock_init_recursive>:
 8000974:	4770      	bx	lr

08000976 <__retarget_lock_acquire_recursive>:
 8000976:	4770      	bx	lr

08000978 <__retarget_lock_release_recursive>:
 8000978:	4770      	bx	lr
	...

0800097c <_free_r>:
 800097c:	b538      	push	{r3, r4, r5, lr}
 800097e:	4605      	mov	r5, r0
 8000980:	2900      	cmp	r1, #0
 8000982:	d041      	beq.n	8000a08 <_free_r+0x8c>
 8000984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000988:	1f0c      	subs	r4, r1, #4
 800098a:	2b00      	cmp	r3, #0
 800098c:	bfb8      	it	lt
 800098e:	18e4      	addlt	r4, r4, r3
 8000990:	f000 f8e0 	bl	8000b54 <__malloc_lock>
 8000994:	4a1d      	ldr	r2, [pc, #116]	@ (8000a0c <_free_r+0x90>)
 8000996:	6813      	ldr	r3, [r2, #0]
 8000998:	b933      	cbnz	r3, 80009a8 <_free_r+0x2c>
 800099a:	6063      	str	r3, [r4, #4]
 800099c:	6014      	str	r4, [r2, #0]
 800099e:	4628      	mov	r0, r5
 80009a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009a4:	f000 b8dc 	b.w	8000b60 <__malloc_unlock>
 80009a8:	42a3      	cmp	r3, r4
 80009aa:	d908      	bls.n	80009be <_free_r+0x42>
 80009ac:	6820      	ldr	r0, [r4, #0]
 80009ae:	1821      	adds	r1, r4, r0
 80009b0:	428b      	cmp	r3, r1
 80009b2:	bf01      	itttt	eq
 80009b4:	6819      	ldreq	r1, [r3, #0]
 80009b6:	685b      	ldreq	r3, [r3, #4]
 80009b8:	1809      	addeq	r1, r1, r0
 80009ba:	6021      	streq	r1, [r4, #0]
 80009bc:	e7ed      	b.n	800099a <_free_r+0x1e>
 80009be:	461a      	mov	r2, r3
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	b10b      	cbz	r3, 80009c8 <_free_r+0x4c>
 80009c4:	42a3      	cmp	r3, r4
 80009c6:	d9fa      	bls.n	80009be <_free_r+0x42>
 80009c8:	6811      	ldr	r1, [r2, #0]
 80009ca:	1850      	adds	r0, r2, r1
 80009cc:	42a0      	cmp	r0, r4
 80009ce:	d10b      	bne.n	80009e8 <_free_r+0x6c>
 80009d0:	6820      	ldr	r0, [r4, #0]
 80009d2:	4401      	add	r1, r0
 80009d4:	1850      	adds	r0, r2, r1
 80009d6:	4283      	cmp	r3, r0
 80009d8:	6011      	str	r1, [r2, #0]
 80009da:	d1e0      	bne.n	800099e <_free_r+0x22>
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	6053      	str	r3, [r2, #4]
 80009e2:	4408      	add	r0, r1
 80009e4:	6010      	str	r0, [r2, #0]
 80009e6:	e7da      	b.n	800099e <_free_r+0x22>
 80009e8:	d902      	bls.n	80009f0 <_free_r+0x74>
 80009ea:	230c      	movs	r3, #12
 80009ec:	602b      	str	r3, [r5, #0]
 80009ee:	e7d6      	b.n	800099e <_free_r+0x22>
 80009f0:	6820      	ldr	r0, [r4, #0]
 80009f2:	1821      	adds	r1, r4, r0
 80009f4:	428b      	cmp	r3, r1
 80009f6:	bf04      	itt	eq
 80009f8:	6819      	ldreq	r1, [r3, #0]
 80009fa:	685b      	ldreq	r3, [r3, #4]
 80009fc:	6063      	str	r3, [r4, #4]
 80009fe:	bf04      	itt	eq
 8000a00:	1809      	addeq	r1, r1, r0
 8000a02:	6021      	streq	r1, [r4, #0]
 8000a04:	6054      	str	r4, [r2, #4]
 8000a06:	e7ca      	b.n	800099e <_free_r+0x22>
 8000a08:	bd38      	pop	{r3, r4, r5, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200001c8 	.word	0x200001c8

08000a10 <sbrk_aligned>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	4e0f      	ldr	r6, [pc, #60]	@ (8000a50 <sbrk_aligned+0x40>)
 8000a14:	460c      	mov	r4, r1
 8000a16:	6831      	ldr	r1, [r6, #0]
 8000a18:	4605      	mov	r5, r0
 8000a1a:	b911      	cbnz	r1, 8000a22 <sbrk_aligned+0x12>
 8000a1c:	f000 fcb0 	bl	8001380 <_sbrk_r>
 8000a20:	6030      	str	r0, [r6, #0]
 8000a22:	4621      	mov	r1, r4
 8000a24:	4628      	mov	r0, r5
 8000a26:	f000 fcab 	bl	8001380 <_sbrk_r>
 8000a2a:	1c43      	adds	r3, r0, #1
 8000a2c:	d103      	bne.n	8000a36 <sbrk_aligned+0x26>
 8000a2e:	f04f 34ff 	mov.w	r4, #4294967295
 8000a32:	4620      	mov	r0, r4
 8000a34:	bd70      	pop	{r4, r5, r6, pc}
 8000a36:	1cc4      	adds	r4, r0, #3
 8000a38:	f024 0403 	bic.w	r4, r4, #3
 8000a3c:	42a0      	cmp	r0, r4
 8000a3e:	d0f8      	beq.n	8000a32 <sbrk_aligned+0x22>
 8000a40:	1a21      	subs	r1, r4, r0
 8000a42:	4628      	mov	r0, r5
 8000a44:	f000 fc9c 	bl	8001380 <_sbrk_r>
 8000a48:	3001      	adds	r0, #1
 8000a4a:	d1f2      	bne.n	8000a32 <sbrk_aligned+0x22>
 8000a4c:	e7ef      	b.n	8000a2e <sbrk_aligned+0x1e>
 8000a4e:	bf00      	nop
 8000a50:	200001c4 	.word	0x200001c4

08000a54 <_malloc_r>:
 8000a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a58:	1ccd      	adds	r5, r1, #3
 8000a5a:	f025 0503 	bic.w	r5, r5, #3
 8000a5e:	3508      	adds	r5, #8
 8000a60:	2d0c      	cmp	r5, #12
 8000a62:	bf38      	it	cc
 8000a64:	250c      	movcc	r5, #12
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	4606      	mov	r6, r0
 8000a6a:	db01      	blt.n	8000a70 <_malloc_r+0x1c>
 8000a6c:	42a9      	cmp	r1, r5
 8000a6e:	d904      	bls.n	8000a7a <_malloc_r+0x26>
 8000a70:	230c      	movs	r3, #12
 8000a72:	6033      	str	r3, [r6, #0]
 8000a74:	2000      	movs	r0, #0
 8000a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b50 <_malloc_r+0xfc>
 8000a7e:	f000 f869 	bl	8000b54 <__malloc_lock>
 8000a82:	f8d8 3000 	ldr.w	r3, [r8]
 8000a86:	461c      	mov	r4, r3
 8000a88:	bb44      	cbnz	r4, 8000adc <_malloc_r+0x88>
 8000a8a:	4629      	mov	r1, r5
 8000a8c:	4630      	mov	r0, r6
 8000a8e:	f7ff ffbf 	bl	8000a10 <sbrk_aligned>
 8000a92:	1c43      	adds	r3, r0, #1
 8000a94:	4604      	mov	r4, r0
 8000a96:	d158      	bne.n	8000b4a <_malloc_r+0xf6>
 8000a98:	f8d8 4000 	ldr.w	r4, [r8]
 8000a9c:	4627      	mov	r7, r4
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d143      	bne.n	8000b2a <_malloc_r+0xd6>
 8000aa2:	2c00      	cmp	r4, #0
 8000aa4:	d04b      	beq.n	8000b3e <_malloc_r+0xea>
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	4639      	mov	r1, r7
 8000aaa:	4630      	mov	r0, r6
 8000aac:	eb04 0903 	add.w	r9, r4, r3
 8000ab0:	f000 fc66 	bl	8001380 <_sbrk_r>
 8000ab4:	4581      	cmp	r9, r0
 8000ab6:	d142      	bne.n	8000b3e <_malloc_r+0xea>
 8000ab8:	6821      	ldr	r1, [r4, #0]
 8000aba:	1a6d      	subs	r5, r5, r1
 8000abc:	4629      	mov	r1, r5
 8000abe:	4630      	mov	r0, r6
 8000ac0:	f7ff ffa6 	bl	8000a10 <sbrk_aligned>
 8000ac4:	3001      	adds	r0, #1
 8000ac6:	d03a      	beq.n	8000b3e <_malloc_r+0xea>
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	442b      	add	r3, r5
 8000acc:	6023      	str	r3, [r4, #0]
 8000ace:	f8d8 3000 	ldr.w	r3, [r8]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	bb62      	cbnz	r2, 8000b30 <_malloc_r+0xdc>
 8000ad6:	f8c8 7000 	str.w	r7, [r8]
 8000ada:	e00f      	b.n	8000afc <_malloc_r+0xa8>
 8000adc:	6822      	ldr	r2, [r4, #0]
 8000ade:	1b52      	subs	r2, r2, r5
 8000ae0:	d420      	bmi.n	8000b24 <_malloc_r+0xd0>
 8000ae2:	2a0b      	cmp	r2, #11
 8000ae4:	d917      	bls.n	8000b16 <_malloc_r+0xc2>
 8000ae6:	1961      	adds	r1, r4, r5
 8000ae8:	42a3      	cmp	r3, r4
 8000aea:	6025      	str	r5, [r4, #0]
 8000aec:	bf18      	it	ne
 8000aee:	6059      	strne	r1, [r3, #4]
 8000af0:	6863      	ldr	r3, [r4, #4]
 8000af2:	bf08      	it	eq
 8000af4:	f8c8 1000 	streq.w	r1, [r8]
 8000af8:	5162      	str	r2, [r4, r5]
 8000afa:	604b      	str	r3, [r1, #4]
 8000afc:	4630      	mov	r0, r6
 8000afe:	f000 f82f 	bl	8000b60 <__malloc_unlock>
 8000b02:	f104 000b 	add.w	r0, r4, #11
 8000b06:	1d23      	adds	r3, r4, #4
 8000b08:	f020 0007 	bic.w	r0, r0, #7
 8000b0c:	1ac2      	subs	r2, r0, r3
 8000b0e:	bf1c      	itt	ne
 8000b10:	1a1b      	subne	r3, r3, r0
 8000b12:	50a3      	strne	r3, [r4, r2]
 8000b14:	e7af      	b.n	8000a76 <_malloc_r+0x22>
 8000b16:	6862      	ldr	r2, [r4, #4]
 8000b18:	42a3      	cmp	r3, r4
 8000b1a:	bf0c      	ite	eq
 8000b1c:	f8c8 2000 	streq.w	r2, [r8]
 8000b20:	605a      	strne	r2, [r3, #4]
 8000b22:	e7eb      	b.n	8000afc <_malloc_r+0xa8>
 8000b24:	4623      	mov	r3, r4
 8000b26:	6864      	ldr	r4, [r4, #4]
 8000b28:	e7ae      	b.n	8000a88 <_malloc_r+0x34>
 8000b2a:	463c      	mov	r4, r7
 8000b2c:	687f      	ldr	r7, [r7, #4]
 8000b2e:	e7b6      	b.n	8000a9e <_malloc_r+0x4a>
 8000b30:	461a      	mov	r2, r3
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	42a3      	cmp	r3, r4
 8000b36:	d1fb      	bne.n	8000b30 <_malloc_r+0xdc>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	6053      	str	r3, [r2, #4]
 8000b3c:	e7de      	b.n	8000afc <_malloc_r+0xa8>
 8000b3e:	230c      	movs	r3, #12
 8000b40:	6033      	str	r3, [r6, #0]
 8000b42:	4630      	mov	r0, r6
 8000b44:	f000 f80c 	bl	8000b60 <__malloc_unlock>
 8000b48:	e794      	b.n	8000a74 <_malloc_r+0x20>
 8000b4a:	6005      	str	r5, [r0, #0]
 8000b4c:	e7d6      	b.n	8000afc <_malloc_r+0xa8>
 8000b4e:	bf00      	nop
 8000b50:	200001c8 	.word	0x200001c8

08000b54 <__malloc_lock>:
 8000b54:	4801      	ldr	r0, [pc, #4]	@ (8000b5c <__malloc_lock+0x8>)
 8000b56:	f7ff bf0e 	b.w	8000976 <__retarget_lock_acquire_recursive>
 8000b5a:	bf00      	nop
 8000b5c:	200001c0 	.word	0x200001c0

08000b60 <__malloc_unlock>:
 8000b60:	4801      	ldr	r0, [pc, #4]	@ (8000b68 <__malloc_unlock+0x8>)
 8000b62:	f7ff bf09 	b.w	8000978 <__retarget_lock_release_recursive>
 8000b66:	bf00      	nop
 8000b68:	200001c0 	.word	0x200001c0

08000b6c <__sfputc_r>:
 8000b6c:	6893      	ldr	r3, [r2, #8]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	b410      	push	{r4}
 8000b74:	6093      	str	r3, [r2, #8]
 8000b76:	da07      	bge.n	8000b88 <__sfputc_r+0x1c>
 8000b78:	6994      	ldr	r4, [r2, #24]
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	db01      	blt.n	8000b82 <__sfputc_r+0x16>
 8000b7e:	290a      	cmp	r1, #10
 8000b80:	d102      	bne.n	8000b88 <__sfputc_r+0x1c>
 8000b82:	bc10      	pop	{r4}
 8000b84:	f000 bb68 	b.w	8001258 <__swbuf_r>
 8000b88:	6813      	ldr	r3, [r2, #0]
 8000b8a:	1c58      	adds	r0, r3, #1
 8000b8c:	6010      	str	r0, [r2, #0]
 8000b8e:	7019      	strb	r1, [r3, #0]
 8000b90:	4608      	mov	r0, r1
 8000b92:	bc10      	pop	{r4}
 8000b94:	4770      	bx	lr

08000b96 <__sfputs_r>:
 8000b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b98:	4606      	mov	r6, r0
 8000b9a:	460f      	mov	r7, r1
 8000b9c:	4614      	mov	r4, r2
 8000b9e:	18d5      	adds	r5, r2, r3
 8000ba0:	42ac      	cmp	r4, r5
 8000ba2:	d101      	bne.n	8000ba8 <__sfputs_r+0x12>
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e007      	b.n	8000bb8 <__sfputs_r+0x22>
 8000ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bac:	463a      	mov	r2, r7
 8000bae:	4630      	mov	r0, r6
 8000bb0:	f7ff ffdc 	bl	8000b6c <__sfputc_r>
 8000bb4:	1c43      	adds	r3, r0, #1
 8000bb6:	d1f3      	bne.n	8000ba0 <__sfputs_r+0xa>
 8000bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000bbc <_vfiprintf_r>:
 8000bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bc0:	460d      	mov	r5, r1
 8000bc2:	b09d      	sub	sp, #116	@ 0x74
 8000bc4:	4614      	mov	r4, r2
 8000bc6:	4698      	mov	r8, r3
 8000bc8:	4606      	mov	r6, r0
 8000bca:	b118      	cbz	r0, 8000bd4 <_vfiprintf_r+0x18>
 8000bcc:	6a03      	ldr	r3, [r0, #32]
 8000bce:	b90b      	cbnz	r3, 8000bd4 <_vfiprintf_r+0x18>
 8000bd0:	f7ff fdcc 	bl	800076c <__sinit>
 8000bd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000bd6:	07d9      	lsls	r1, r3, #31
 8000bd8:	d405      	bmi.n	8000be6 <_vfiprintf_r+0x2a>
 8000bda:	89ab      	ldrh	r3, [r5, #12]
 8000bdc:	059a      	lsls	r2, r3, #22
 8000bde:	d402      	bmi.n	8000be6 <_vfiprintf_r+0x2a>
 8000be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000be2:	f7ff fec8 	bl	8000976 <__retarget_lock_acquire_recursive>
 8000be6:	89ab      	ldrh	r3, [r5, #12]
 8000be8:	071b      	lsls	r3, r3, #28
 8000bea:	d501      	bpl.n	8000bf0 <_vfiprintf_r+0x34>
 8000bec:	692b      	ldr	r3, [r5, #16]
 8000bee:	b99b      	cbnz	r3, 8000c18 <_vfiprintf_r+0x5c>
 8000bf0:	4629      	mov	r1, r5
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	f000 fb6e 	bl	80012d4 <__swsetup_r>
 8000bf8:	b170      	cbz	r0, 8000c18 <_vfiprintf_r+0x5c>
 8000bfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000bfc:	07dc      	lsls	r4, r3, #31
 8000bfe:	d504      	bpl.n	8000c0a <_vfiprintf_r+0x4e>
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	b01d      	add	sp, #116	@ 0x74
 8000c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c0a:	89ab      	ldrh	r3, [r5, #12]
 8000c0c:	0598      	lsls	r0, r3, #22
 8000c0e:	d4f7      	bmi.n	8000c00 <_vfiprintf_r+0x44>
 8000c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c12:	f7ff feb1 	bl	8000978 <__retarget_lock_release_recursive>
 8000c16:	e7f3      	b.n	8000c00 <_vfiprintf_r+0x44>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c1c:	2320      	movs	r3, #32
 8000c1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c26:	2330      	movs	r3, #48	@ 0x30
 8000c28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000dd8 <_vfiprintf_r+0x21c>
 8000c2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c30:	f04f 0901 	mov.w	r9, #1
 8000c34:	4623      	mov	r3, r4
 8000c36:	469a      	mov	sl, r3
 8000c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c3c:	b10a      	cbz	r2, 8000c42 <_vfiprintf_r+0x86>
 8000c3e:	2a25      	cmp	r2, #37	@ 0x25
 8000c40:	d1f9      	bne.n	8000c36 <_vfiprintf_r+0x7a>
 8000c42:	ebba 0b04 	subs.w	fp, sl, r4
 8000c46:	d00b      	beq.n	8000c60 <_vfiprintf_r+0xa4>
 8000c48:	465b      	mov	r3, fp
 8000c4a:	4622      	mov	r2, r4
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	4630      	mov	r0, r6
 8000c50:	f7ff ffa1 	bl	8000b96 <__sfputs_r>
 8000c54:	3001      	adds	r0, #1
 8000c56:	f000 80a7 	beq.w	8000da8 <_vfiprintf_r+0x1ec>
 8000c5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c5c:	445a      	add	r2, fp
 8000c5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c60:	f89a 3000 	ldrb.w	r3, [sl]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 809f 	beq.w	8000da8 <_vfiprintf_r+0x1ec>
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c74:	f10a 0a01 	add.w	sl, sl, #1
 8000c78:	9304      	str	r3, [sp, #16]
 8000c7a:	9307      	str	r3, [sp, #28]
 8000c7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c80:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c82:	4654      	mov	r4, sl
 8000c84:	2205      	movs	r2, #5
 8000c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c8a:	4853      	ldr	r0, [pc, #332]	@ (8000dd8 <_vfiprintf_r+0x21c>)
 8000c8c:	f7ff faa8 	bl	80001e0 <memchr>
 8000c90:	9a04      	ldr	r2, [sp, #16]
 8000c92:	b9d8      	cbnz	r0, 8000ccc <_vfiprintf_r+0x110>
 8000c94:	06d1      	lsls	r1, r2, #27
 8000c96:	bf44      	itt	mi
 8000c98:	2320      	movmi	r3, #32
 8000c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c9e:	0713      	lsls	r3, r2, #28
 8000ca0:	bf44      	itt	mi
 8000ca2:	232b      	movmi	r3, #43	@ 0x2b
 8000ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8000cac:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cae:	d015      	beq.n	8000cdc <_vfiprintf_r+0x120>
 8000cb0:	9a07      	ldr	r2, [sp, #28]
 8000cb2:	4654      	mov	r4, sl
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f04f 0c0a 	mov.w	ip, #10
 8000cba:	4621      	mov	r1, r4
 8000cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000cc0:	3b30      	subs	r3, #48	@ 0x30
 8000cc2:	2b09      	cmp	r3, #9
 8000cc4:	d94b      	bls.n	8000d5e <_vfiprintf_r+0x1a2>
 8000cc6:	b1b0      	cbz	r0, 8000cf6 <_vfiprintf_r+0x13a>
 8000cc8:	9207      	str	r2, [sp, #28]
 8000cca:	e014      	b.n	8000cf6 <_vfiprintf_r+0x13a>
 8000ccc:	eba0 0308 	sub.w	r3, r0, r8
 8000cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	9304      	str	r3, [sp, #16]
 8000cd8:	46a2      	mov	sl, r4
 8000cda:	e7d2      	b.n	8000c82 <_vfiprintf_r+0xc6>
 8000cdc:	9b03      	ldr	r3, [sp, #12]
 8000cde:	1d19      	adds	r1, r3, #4
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	9103      	str	r1, [sp, #12]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bfbb      	ittet	lt
 8000ce8:	425b      	neglt	r3, r3
 8000cea:	f042 0202 	orrlt.w	r2, r2, #2
 8000cee:	9307      	strge	r3, [sp, #28]
 8000cf0:	9307      	strlt	r3, [sp, #28]
 8000cf2:	bfb8      	it	lt
 8000cf4:	9204      	strlt	r2, [sp, #16]
 8000cf6:	7823      	ldrb	r3, [r4, #0]
 8000cf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cfa:	d10a      	bne.n	8000d12 <_vfiprintf_r+0x156>
 8000cfc:	7863      	ldrb	r3, [r4, #1]
 8000cfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d00:	d132      	bne.n	8000d68 <_vfiprintf_r+0x1ac>
 8000d02:	9b03      	ldr	r3, [sp, #12]
 8000d04:	1d1a      	adds	r2, r3, #4
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	9203      	str	r2, [sp, #12]
 8000d0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d0e:	3402      	adds	r4, #2
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000ddc <_vfiprintf_r+0x220>
 8000d16:	7821      	ldrb	r1, [r4, #0]
 8000d18:	2203      	movs	r2, #3
 8000d1a:	4650      	mov	r0, sl
 8000d1c:	f7ff fa60 	bl	80001e0 <memchr>
 8000d20:	b138      	cbz	r0, 8000d32 <_vfiprintf_r+0x176>
 8000d22:	9b04      	ldr	r3, [sp, #16]
 8000d24:	eba0 000a 	sub.w	r0, r0, sl
 8000d28:	2240      	movs	r2, #64	@ 0x40
 8000d2a:	4082      	lsls	r2, r0
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	3401      	adds	r4, #1
 8000d30:	9304      	str	r3, [sp, #16]
 8000d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d36:	482a      	ldr	r0, [pc, #168]	@ (8000de0 <_vfiprintf_r+0x224>)
 8000d38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d3c:	2206      	movs	r2, #6
 8000d3e:	f7ff fa4f 	bl	80001e0 <memchr>
 8000d42:	2800      	cmp	r0, #0
 8000d44:	d03f      	beq.n	8000dc6 <_vfiprintf_r+0x20a>
 8000d46:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <_vfiprintf_r+0x228>)
 8000d48:	bb1b      	cbnz	r3, 8000d92 <_vfiprintf_r+0x1d6>
 8000d4a:	9b03      	ldr	r3, [sp, #12]
 8000d4c:	3307      	adds	r3, #7
 8000d4e:	f023 0307 	bic.w	r3, r3, #7
 8000d52:	3308      	adds	r3, #8
 8000d54:	9303      	str	r3, [sp, #12]
 8000d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d58:	443b      	add	r3, r7
 8000d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d5c:	e76a      	b.n	8000c34 <_vfiprintf_r+0x78>
 8000d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d62:	460c      	mov	r4, r1
 8000d64:	2001      	movs	r0, #1
 8000d66:	e7a8      	b.n	8000cba <_vfiprintf_r+0xfe>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	3401      	adds	r4, #1
 8000d6c:	9305      	str	r3, [sp, #20]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 0c0a 	mov.w	ip, #10
 8000d74:	4620      	mov	r0, r4
 8000d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d7a:	3a30      	subs	r2, #48	@ 0x30
 8000d7c:	2a09      	cmp	r2, #9
 8000d7e:	d903      	bls.n	8000d88 <_vfiprintf_r+0x1cc>
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0c6      	beq.n	8000d12 <_vfiprintf_r+0x156>
 8000d84:	9105      	str	r1, [sp, #20]
 8000d86:	e7c4      	b.n	8000d12 <_vfiprintf_r+0x156>
 8000d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e7f0      	b.n	8000d74 <_vfiprintf_r+0x1b8>
 8000d92:	ab03      	add	r3, sp, #12
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	462a      	mov	r2, r5
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <_vfiprintf_r+0x22c>)
 8000d9a:	a904      	add	r1, sp, #16
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	f3af 8000 	nop.w
 8000da2:	4607      	mov	r7, r0
 8000da4:	1c78      	adds	r0, r7, #1
 8000da6:	d1d6      	bne.n	8000d56 <_vfiprintf_r+0x19a>
 8000da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000daa:	07d9      	lsls	r1, r3, #31
 8000dac:	d405      	bmi.n	8000dba <_vfiprintf_r+0x1fe>
 8000dae:	89ab      	ldrh	r3, [r5, #12]
 8000db0:	059a      	lsls	r2, r3, #22
 8000db2:	d402      	bmi.n	8000dba <_vfiprintf_r+0x1fe>
 8000db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000db6:	f7ff fddf 	bl	8000978 <__retarget_lock_release_recursive>
 8000dba:	89ab      	ldrh	r3, [r5, #12]
 8000dbc:	065b      	lsls	r3, r3, #25
 8000dbe:	f53f af1f 	bmi.w	8000c00 <_vfiprintf_r+0x44>
 8000dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000dc4:	e71e      	b.n	8000c04 <_vfiprintf_r+0x48>
 8000dc6:	ab03      	add	r3, sp, #12
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	462a      	mov	r2, r5
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <_vfiprintf_r+0x22c>)
 8000dce:	a904      	add	r1, sp, #16
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	f000 f879 	bl	8000ec8 <_printf_i>
 8000dd6:	e7e4      	b.n	8000da2 <_vfiprintf_r+0x1e6>
 8000dd8:	080014d4 	.word	0x080014d4
 8000ddc:	080014da 	.word	0x080014da
 8000de0:	080014de 	.word	0x080014de
 8000de4:	00000000 	.word	0x00000000
 8000de8:	08000b97 	.word	0x08000b97

08000dec <_printf_common>:
 8000dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df0:	4616      	mov	r6, r2
 8000df2:	4698      	mov	r8, r3
 8000df4:	688a      	ldr	r2, [r1, #8]
 8000df6:	690b      	ldr	r3, [r1, #16]
 8000df8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	bfb8      	it	lt
 8000e00:	4613      	movlt	r3, r2
 8000e02:	6033      	str	r3, [r6, #0]
 8000e04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e08:	4607      	mov	r7, r0
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	b10a      	cbz	r2, 8000e12 <_printf_common+0x26>
 8000e0e:	3301      	adds	r3, #1
 8000e10:	6033      	str	r3, [r6, #0]
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	0699      	lsls	r1, r3, #26
 8000e16:	bf42      	ittt	mi
 8000e18:	6833      	ldrmi	r3, [r6, #0]
 8000e1a:	3302      	addmi	r3, #2
 8000e1c:	6033      	strmi	r3, [r6, #0]
 8000e1e:	6825      	ldr	r5, [r4, #0]
 8000e20:	f015 0506 	ands.w	r5, r5, #6
 8000e24:	d106      	bne.n	8000e34 <_printf_common+0x48>
 8000e26:	f104 0a19 	add.w	sl, r4, #25
 8000e2a:	68e3      	ldr	r3, [r4, #12]
 8000e2c:	6832      	ldr	r2, [r6, #0]
 8000e2e:	1a9b      	subs	r3, r3, r2
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	dc26      	bgt.n	8000e82 <_printf_common+0x96>
 8000e34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e38:	6822      	ldr	r2, [r4, #0]
 8000e3a:	3b00      	subs	r3, #0
 8000e3c:	bf18      	it	ne
 8000e3e:	2301      	movne	r3, #1
 8000e40:	0692      	lsls	r2, r2, #26
 8000e42:	d42b      	bmi.n	8000e9c <_printf_common+0xb0>
 8000e44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e48:	4641      	mov	r1, r8
 8000e4a:	4638      	mov	r0, r7
 8000e4c:	47c8      	blx	r9
 8000e4e:	3001      	adds	r0, #1
 8000e50:	d01e      	beq.n	8000e90 <_printf_common+0xa4>
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	6922      	ldr	r2, [r4, #16]
 8000e56:	f003 0306 	and.w	r3, r3, #6
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf02      	ittt	eq
 8000e5e:	68e5      	ldreq	r5, [r4, #12]
 8000e60:	6833      	ldreq	r3, [r6, #0]
 8000e62:	1aed      	subeq	r5, r5, r3
 8000e64:	68a3      	ldr	r3, [r4, #8]
 8000e66:	bf0c      	ite	eq
 8000e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e6c:	2500      	movne	r5, #0
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	bfc4      	itt	gt
 8000e72:	1a9b      	subgt	r3, r3, r2
 8000e74:	18ed      	addgt	r5, r5, r3
 8000e76:	2600      	movs	r6, #0
 8000e78:	341a      	adds	r4, #26
 8000e7a:	42b5      	cmp	r5, r6
 8000e7c:	d11a      	bne.n	8000eb4 <_printf_common+0xc8>
 8000e7e:	2000      	movs	r0, #0
 8000e80:	e008      	b.n	8000e94 <_printf_common+0xa8>
 8000e82:	2301      	movs	r3, #1
 8000e84:	4652      	mov	r2, sl
 8000e86:	4641      	mov	r1, r8
 8000e88:	4638      	mov	r0, r7
 8000e8a:	47c8      	blx	r9
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	d103      	bne.n	8000e98 <_printf_common+0xac>
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	3501      	adds	r5, #1
 8000e9a:	e7c6      	b.n	8000e2a <_printf_common+0x3e>
 8000e9c:	18e1      	adds	r1, r4, r3
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	2030      	movs	r0, #48	@ 0x30
 8000ea2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000ea6:	4422      	add	r2, r4
 8000ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	e7c7      	b.n	8000e44 <_printf_common+0x58>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	4622      	mov	r2, r4
 8000eb8:	4641      	mov	r1, r8
 8000eba:	4638      	mov	r0, r7
 8000ebc:	47c8      	blx	r9
 8000ebe:	3001      	adds	r0, #1
 8000ec0:	d0e6      	beq.n	8000e90 <_printf_common+0xa4>
 8000ec2:	3601      	adds	r6, #1
 8000ec4:	e7d9      	b.n	8000e7a <_printf_common+0x8e>
	...

08000ec8 <_printf_i>:
 8000ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ecc:	7e0f      	ldrb	r7, [r1, #24]
 8000ece:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000ed0:	2f78      	cmp	r7, #120	@ 0x78
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	4680      	mov	r8, r0
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	469a      	mov	sl, r3
 8000eda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000ede:	d807      	bhi.n	8000ef0 <_printf_i+0x28>
 8000ee0:	2f62      	cmp	r7, #98	@ 0x62
 8000ee2:	d80a      	bhi.n	8000efa <_printf_i+0x32>
 8000ee4:	2f00      	cmp	r7, #0
 8000ee6:	f000 80d2 	beq.w	800108e <_printf_i+0x1c6>
 8000eea:	2f58      	cmp	r7, #88	@ 0x58
 8000eec:	f000 80b9 	beq.w	8001062 <_printf_i+0x19a>
 8000ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ef4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ef8:	e03a      	b.n	8000f70 <_printf_i+0xa8>
 8000efa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000efe:	2b15      	cmp	r3, #21
 8000f00:	d8f6      	bhi.n	8000ef0 <_printf_i+0x28>
 8000f02:	a101      	add	r1, pc, #4	@ (adr r1, 8000f08 <_printf_i+0x40>)
 8000f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f08:	08000f61 	.word	0x08000f61
 8000f0c:	08000f75 	.word	0x08000f75
 8000f10:	08000ef1 	.word	0x08000ef1
 8000f14:	08000ef1 	.word	0x08000ef1
 8000f18:	08000ef1 	.word	0x08000ef1
 8000f1c:	08000ef1 	.word	0x08000ef1
 8000f20:	08000f75 	.word	0x08000f75
 8000f24:	08000ef1 	.word	0x08000ef1
 8000f28:	08000ef1 	.word	0x08000ef1
 8000f2c:	08000ef1 	.word	0x08000ef1
 8000f30:	08000ef1 	.word	0x08000ef1
 8000f34:	08001075 	.word	0x08001075
 8000f38:	08000f9f 	.word	0x08000f9f
 8000f3c:	0800102f 	.word	0x0800102f
 8000f40:	08000ef1 	.word	0x08000ef1
 8000f44:	08000ef1 	.word	0x08000ef1
 8000f48:	08001097 	.word	0x08001097
 8000f4c:	08000ef1 	.word	0x08000ef1
 8000f50:	08000f9f 	.word	0x08000f9f
 8000f54:	08000ef1 	.word	0x08000ef1
 8000f58:	08000ef1 	.word	0x08000ef1
 8000f5c:	08001037 	.word	0x08001037
 8000f60:	6833      	ldr	r3, [r6, #0]
 8000f62:	1d1a      	adds	r2, r3, #4
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6032      	str	r2, [r6, #0]
 8000f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f70:	2301      	movs	r3, #1
 8000f72:	e09d      	b.n	80010b0 <_printf_i+0x1e8>
 8000f74:	6833      	ldr	r3, [r6, #0]
 8000f76:	6820      	ldr	r0, [r4, #0]
 8000f78:	1d19      	adds	r1, r3, #4
 8000f7a:	6031      	str	r1, [r6, #0]
 8000f7c:	0606      	lsls	r6, r0, #24
 8000f7e:	d501      	bpl.n	8000f84 <_printf_i+0xbc>
 8000f80:	681d      	ldr	r5, [r3, #0]
 8000f82:	e003      	b.n	8000f8c <_printf_i+0xc4>
 8000f84:	0645      	lsls	r5, r0, #25
 8000f86:	d5fb      	bpl.n	8000f80 <_printf_i+0xb8>
 8000f88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f8c:	2d00      	cmp	r5, #0
 8000f8e:	da03      	bge.n	8000f98 <_printf_i+0xd0>
 8000f90:	232d      	movs	r3, #45	@ 0x2d
 8000f92:	426d      	negs	r5, r5
 8000f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f98:	4859      	ldr	r0, [pc, #356]	@ (8001100 <_printf_i+0x238>)
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	e011      	b.n	8000fc2 <_printf_i+0xfa>
 8000f9e:	6821      	ldr	r1, [r4, #0]
 8000fa0:	6833      	ldr	r3, [r6, #0]
 8000fa2:	0608      	lsls	r0, r1, #24
 8000fa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8000fa8:	d402      	bmi.n	8000fb0 <_printf_i+0xe8>
 8000faa:	0649      	lsls	r1, r1, #25
 8000fac:	bf48      	it	mi
 8000fae:	b2ad      	uxthmi	r5, r5
 8000fb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8000fb2:	4853      	ldr	r0, [pc, #332]	@ (8001100 <_printf_i+0x238>)
 8000fb4:	6033      	str	r3, [r6, #0]
 8000fb6:	bf14      	ite	ne
 8000fb8:	230a      	movne	r3, #10
 8000fba:	2308      	moveq	r3, #8
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000fc2:	6866      	ldr	r6, [r4, #4]
 8000fc4:	60a6      	str	r6, [r4, #8]
 8000fc6:	2e00      	cmp	r6, #0
 8000fc8:	bfa2      	ittt	ge
 8000fca:	6821      	ldrge	r1, [r4, #0]
 8000fcc:	f021 0104 	bicge.w	r1, r1, #4
 8000fd0:	6021      	strge	r1, [r4, #0]
 8000fd2:	b90d      	cbnz	r5, 8000fd8 <_printf_i+0x110>
 8000fd4:	2e00      	cmp	r6, #0
 8000fd6:	d04b      	beq.n	8001070 <_printf_i+0x1a8>
 8000fd8:	4616      	mov	r6, r2
 8000fda:	fbb5 f1f3 	udiv	r1, r5, r3
 8000fde:	fb03 5711 	mls	r7, r3, r1, r5
 8000fe2:	5dc7      	ldrb	r7, [r0, r7]
 8000fe4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000fe8:	462f      	mov	r7, r5
 8000fea:	42bb      	cmp	r3, r7
 8000fec:	460d      	mov	r5, r1
 8000fee:	d9f4      	bls.n	8000fda <_printf_i+0x112>
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d10b      	bne.n	800100c <_printf_i+0x144>
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	07df      	lsls	r7, r3, #31
 8000ff8:	d508      	bpl.n	800100c <_printf_i+0x144>
 8000ffa:	6923      	ldr	r3, [r4, #16]
 8000ffc:	6861      	ldr	r1, [r4, #4]
 8000ffe:	4299      	cmp	r1, r3
 8001000:	bfde      	ittt	le
 8001002:	2330      	movle	r3, #48	@ 0x30
 8001004:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001008:	f106 36ff 	addle.w	r6, r6, #4294967295
 800100c:	1b92      	subs	r2, r2, r6
 800100e:	6122      	str	r2, [r4, #16]
 8001010:	f8cd a000 	str.w	sl, [sp]
 8001014:	464b      	mov	r3, r9
 8001016:	aa03      	add	r2, sp, #12
 8001018:	4621      	mov	r1, r4
 800101a:	4640      	mov	r0, r8
 800101c:	f7ff fee6 	bl	8000dec <_printf_common>
 8001020:	3001      	adds	r0, #1
 8001022:	d14a      	bne.n	80010ba <_printf_i+0x1f2>
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	b004      	add	sp, #16
 800102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	4833      	ldr	r0, [pc, #204]	@ (8001104 <_printf_i+0x23c>)
 8001038:	2778      	movs	r7, #120	@ 0x78
 800103a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	6831      	ldr	r1, [r6, #0]
 8001042:	061f      	lsls	r7, r3, #24
 8001044:	f851 5b04 	ldr.w	r5, [r1], #4
 8001048:	d402      	bmi.n	8001050 <_printf_i+0x188>
 800104a:	065f      	lsls	r7, r3, #25
 800104c:	bf48      	it	mi
 800104e:	b2ad      	uxthmi	r5, r5
 8001050:	6031      	str	r1, [r6, #0]
 8001052:	07d9      	lsls	r1, r3, #31
 8001054:	bf44      	itt	mi
 8001056:	f043 0320 	orrmi.w	r3, r3, #32
 800105a:	6023      	strmi	r3, [r4, #0]
 800105c:	b11d      	cbz	r5, 8001066 <_printf_i+0x19e>
 800105e:	2310      	movs	r3, #16
 8001060:	e7ac      	b.n	8000fbc <_printf_i+0xf4>
 8001062:	4827      	ldr	r0, [pc, #156]	@ (8001100 <_printf_i+0x238>)
 8001064:	e7e9      	b.n	800103a <_printf_i+0x172>
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	f023 0320 	bic.w	r3, r3, #32
 800106c:	6023      	str	r3, [r4, #0]
 800106e:	e7f6      	b.n	800105e <_printf_i+0x196>
 8001070:	4616      	mov	r6, r2
 8001072:	e7bd      	b.n	8000ff0 <_printf_i+0x128>
 8001074:	6833      	ldr	r3, [r6, #0]
 8001076:	6825      	ldr	r5, [r4, #0]
 8001078:	6961      	ldr	r1, [r4, #20]
 800107a:	1d18      	adds	r0, r3, #4
 800107c:	6030      	str	r0, [r6, #0]
 800107e:	062e      	lsls	r6, r5, #24
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	d501      	bpl.n	8001088 <_printf_i+0x1c0>
 8001084:	6019      	str	r1, [r3, #0]
 8001086:	e002      	b.n	800108e <_printf_i+0x1c6>
 8001088:	0668      	lsls	r0, r5, #25
 800108a:	d5fb      	bpl.n	8001084 <_printf_i+0x1bc>
 800108c:	8019      	strh	r1, [r3, #0]
 800108e:	2300      	movs	r3, #0
 8001090:	6123      	str	r3, [r4, #16]
 8001092:	4616      	mov	r6, r2
 8001094:	e7bc      	b.n	8001010 <_printf_i+0x148>
 8001096:	6833      	ldr	r3, [r6, #0]
 8001098:	1d1a      	adds	r2, r3, #4
 800109a:	6032      	str	r2, [r6, #0]
 800109c:	681e      	ldr	r6, [r3, #0]
 800109e:	6862      	ldr	r2, [r4, #4]
 80010a0:	2100      	movs	r1, #0
 80010a2:	4630      	mov	r0, r6
 80010a4:	f7ff f89c 	bl	80001e0 <memchr>
 80010a8:	b108      	cbz	r0, 80010ae <_printf_i+0x1e6>
 80010aa:	1b80      	subs	r0, r0, r6
 80010ac:	6060      	str	r0, [r4, #4]
 80010ae:	6863      	ldr	r3, [r4, #4]
 80010b0:	6123      	str	r3, [r4, #16]
 80010b2:	2300      	movs	r3, #0
 80010b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010b8:	e7aa      	b.n	8001010 <_printf_i+0x148>
 80010ba:	6923      	ldr	r3, [r4, #16]
 80010bc:	4632      	mov	r2, r6
 80010be:	4649      	mov	r1, r9
 80010c0:	4640      	mov	r0, r8
 80010c2:	47d0      	blx	sl
 80010c4:	3001      	adds	r0, #1
 80010c6:	d0ad      	beq.n	8001024 <_printf_i+0x15c>
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	079b      	lsls	r3, r3, #30
 80010cc:	d413      	bmi.n	80010f6 <_printf_i+0x22e>
 80010ce:	68e0      	ldr	r0, [r4, #12]
 80010d0:	9b03      	ldr	r3, [sp, #12]
 80010d2:	4298      	cmp	r0, r3
 80010d4:	bfb8      	it	lt
 80010d6:	4618      	movlt	r0, r3
 80010d8:	e7a6      	b.n	8001028 <_printf_i+0x160>
 80010da:	2301      	movs	r3, #1
 80010dc:	4632      	mov	r2, r6
 80010de:	4649      	mov	r1, r9
 80010e0:	4640      	mov	r0, r8
 80010e2:	47d0      	blx	sl
 80010e4:	3001      	adds	r0, #1
 80010e6:	d09d      	beq.n	8001024 <_printf_i+0x15c>
 80010e8:	3501      	adds	r5, #1
 80010ea:	68e3      	ldr	r3, [r4, #12]
 80010ec:	9903      	ldr	r1, [sp, #12]
 80010ee:	1a5b      	subs	r3, r3, r1
 80010f0:	42ab      	cmp	r3, r5
 80010f2:	dcf2      	bgt.n	80010da <_printf_i+0x212>
 80010f4:	e7eb      	b.n	80010ce <_printf_i+0x206>
 80010f6:	2500      	movs	r5, #0
 80010f8:	f104 0619 	add.w	r6, r4, #25
 80010fc:	e7f5      	b.n	80010ea <_printf_i+0x222>
 80010fe:	bf00      	nop
 8001100:	080014e5 	.word	0x080014e5
 8001104:	080014f6 	.word	0x080014f6

08001108 <__sflush_r>:
 8001108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	0716      	lsls	r6, r2, #28
 8001110:	4605      	mov	r5, r0
 8001112:	460c      	mov	r4, r1
 8001114:	d454      	bmi.n	80011c0 <__sflush_r+0xb8>
 8001116:	684b      	ldr	r3, [r1, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc02      	bgt.n	8001122 <__sflush_r+0x1a>
 800111c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800111e:	2b00      	cmp	r3, #0
 8001120:	dd48      	ble.n	80011b4 <__sflush_r+0xac>
 8001122:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001124:	2e00      	cmp	r6, #0
 8001126:	d045      	beq.n	80011b4 <__sflush_r+0xac>
 8001128:	2300      	movs	r3, #0
 800112a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800112e:	682f      	ldr	r7, [r5, #0]
 8001130:	6a21      	ldr	r1, [r4, #32]
 8001132:	602b      	str	r3, [r5, #0]
 8001134:	d030      	beq.n	8001198 <__sflush_r+0x90>
 8001136:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001138:	89a3      	ldrh	r3, [r4, #12]
 800113a:	0759      	lsls	r1, r3, #29
 800113c:	d505      	bpl.n	800114a <__sflush_r+0x42>
 800113e:	6863      	ldr	r3, [r4, #4]
 8001140:	1ad2      	subs	r2, r2, r3
 8001142:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001144:	b10b      	cbz	r3, 800114a <__sflush_r+0x42>
 8001146:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001148:	1ad2      	subs	r2, r2, r3
 800114a:	2300      	movs	r3, #0
 800114c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800114e:	6a21      	ldr	r1, [r4, #32]
 8001150:	4628      	mov	r0, r5
 8001152:	47b0      	blx	r6
 8001154:	1c43      	adds	r3, r0, #1
 8001156:	89a3      	ldrh	r3, [r4, #12]
 8001158:	d106      	bne.n	8001168 <__sflush_r+0x60>
 800115a:	6829      	ldr	r1, [r5, #0]
 800115c:	291d      	cmp	r1, #29
 800115e:	d82b      	bhi.n	80011b8 <__sflush_r+0xb0>
 8001160:	4a28      	ldr	r2, [pc, #160]	@ (8001204 <__sflush_r+0xfc>)
 8001162:	410a      	asrs	r2, r1
 8001164:	07d6      	lsls	r6, r2, #31
 8001166:	d427      	bmi.n	80011b8 <__sflush_r+0xb0>
 8001168:	2200      	movs	r2, #0
 800116a:	6062      	str	r2, [r4, #4]
 800116c:	04d9      	lsls	r1, r3, #19
 800116e:	6922      	ldr	r2, [r4, #16]
 8001170:	6022      	str	r2, [r4, #0]
 8001172:	d504      	bpl.n	800117e <__sflush_r+0x76>
 8001174:	1c42      	adds	r2, r0, #1
 8001176:	d101      	bne.n	800117c <__sflush_r+0x74>
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	b903      	cbnz	r3, 800117e <__sflush_r+0x76>
 800117c:	6560      	str	r0, [r4, #84]	@ 0x54
 800117e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001180:	602f      	str	r7, [r5, #0]
 8001182:	b1b9      	cbz	r1, 80011b4 <__sflush_r+0xac>
 8001184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001188:	4299      	cmp	r1, r3
 800118a:	d002      	beq.n	8001192 <__sflush_r+0x8a>
 800118c:	4628      	mov	r0, r5
 800118e:	f7ff fbf5 	bl	800097c <_free_r>
 8001192:	2300      	movs	r3, #0
 8001194:	6363      	str	r3, [r4, #52]	@ 0x34
 8001196:	e00d      	b.n	80011b4 <__sflush_r+0xac>
 8001198:	2301      	movs	r3, #1
 800119a:	4628      	mov	r0, r5
 800119c:	47b0      	blx	r6
 800119e:	4602      	mov	r2, r0
 80011a0:	1c50      	adds	r0, r2, #1
 80011a2:	d1c9      	bne.n	8001138 <__sflush_r+0x30>
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0c6      	beq.n	8001138 <__sflush_r+0x30>
 80011aa:	2b1d      	cmp	r3, #29
 80011ac:	d001      	beq.n	80011b2 <__sflush_r+0xaa>
 80011ae:	2b16      	cmp	r3, #22
 80011b0:	d11d      	bne.n	80011ee <__sflush_r+0xe6>
 80011b2:	602f      	str	r7, [r5, #0]
 80011b4:	2000      	movs	r0, #0
 80011b6:	e021      	b.n	80011fc <__sflush_r+0xf4>
 80011b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011bc:	b21b      	sxth	r3, r3
 80011be:	e01a      	b.n	80011f6 <__sflush_r+0xee>
 80011c0:	690f      	ldr	r7, [r1, #16]
 80011c2:	2f00      	cmp	r7, #0
 80011c4:	d0f6      	beq.n	80011b4 <__sflush_r+0xac>
 80011c6:	0793      	lsls	r3, r2, #30
 80011c8:	680e      	ldr	r6, [r1, #0]
 80011ca:	bf08      	it	eq
 80011cc:	694b      	ldreq	r3, [r1, #20]
 80011ce:	600f      	str	r7, [r1, #0]
 80011d0:	bf18      	it	ne
 80011d2:	2300      	movne	r3, #0
 80011d4:	1bf6      	subs	r6, r6, r7
 80011d6:	608b      	str	r3, [r1, #8]
 80011d8:	2e00      	cmp	r6, #0
 80011da:	ddeb      	ble.n	80011b4 <__sflush_r+0xac>
 80011dc:	6a21      	ldr	r1, [r4, #32]
 80011de:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80011e2:	4633      	mov	r3, r6
 80011e4:	463a      	mov	r2, r7
 80011e6:	4628      	mov	r0, r5
 80011e8:	47e0      	blx	ip
 80011ea:	2800      	cmp	r0, #0
 80011ec:	dc07      	bgt.n	80011fe <__sflush_r+0xf6>
 80011ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f6:	81a3      	strh	r3, [r4, #12]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011fe:	4407      	add	r7, r0
 8001200:	1a36      	subs	r6, r6, r0
 8001202:	e7e9      	b.n	80011d8 <__sflush_r+0xd0>
 8001204:	dfbffffe 	.word	0xdfbffffe

08001208 <_fflush_r>:
 8001208:	b538      	push	{r3, r4, r5, lr}
 800120a:	690b      	ldr	r3, [r1, #16]
 800120c:	4605      	mov	r5, r0
 800120e:	460c      	mov	r4, r1
 8001210:	b913      	cbnz	r3, 8001218 <_fflush_r+0x10>
 8001212:	2500      	movs	r5, #0
 8001214:	4628      	mov	r0, r5
 8001216:	bd38      	pop	{r3, r4, r5, pc}
 8001218:	b118      	cbz	r0, 8001222 <_fflush_r+0x1a>
 800121a:	6a03      	ldr	r3, [r0, #32]
 800121c:	b90b      	cbnz	r3, 8001222 <_fflush_r+0x1a>
 800121e:	f7ff faa5 	bl	800076c <__sinit>
 8001222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f3      	beq.n	8001212 <_fflush_r+0xa>
 800122a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800122c:	07d0      	lsls	r0, r2, #31
 800122e:	d404      	bmi.n	800123a <_fflush_r+0x32>
 8001230:	0599      	lsls	r1, r3, #22
 8001232:	d402      	bmi.n	800123a <_fflush_r+0x32>
 8001234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001236:	f7ff fb9e 	bl	8000976 <__retarget_lock_acquire_recursive>
 800123a:	4628      	mov	r0, r5
 800123c:	4621      	mov	r1, r4
 800123e:	f7ff ff63 	bl	8001108 <__sflush_r>
 8001242:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001244:	07da      	lsls	r2, r3, #31
 8001246:	4605      	mov	r5, r0
 8001248:	d4e4      	bmi.n	8001214 <_fflush_r+0xc>
 800124a:	89a3      	ldrh	r3, [r4, #12]
 800124c:	059b      	lsls	r3, r3, #22
 800124e:	d4e1      	bmi.n	8001214 <_fflush_r+0xc>
 8001250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001252:	f7ff fb91 	bl	8000978 <__retarget_lock_release_recursive>
 8001256:	e7dd      	b.n	8001214 <_fflush_r+0xc>

08001258 <__swbuf_r>:
 8001258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125a:	460e      	mov	r6, r1
 800125c:	4614      	mov	r4, r2
 800125e:	4605      	mov	r5, r0
 8001260:	b118      	cbz	r0, 800126a <__swbuf_r+0x12>
 8001262:	6a03      	ldr	r3, [r0, #32]
 8001264:	b90b      	cbnz	r3, 800126a <__swbuf_r+0x12>
 8001266:	f7ff fa81 	bl	800076c <__sinit>
 800126a:	69a3      	ldr	r3, [r4, #24]
 800126c:	60a3      	str	r3, [r4, #8]
 800126e:	89a3      	ldrh	r3, [r4, #12]
 8001270:	071a      	lsls	r2, r3, #28
 8001272:	d501      	bpl.n	8001278 <__swbuf_r+0x20>
 8001274:	6923      	ldr	r3, [r4, #16]
 8001276:	b943      	cbnz	r3, 800128a <__swbuf_r+0x32>
 8001278:	4621      	mov	r1, r4
 800127a:	4628      	mov	r0, r5
 800127c:	f000 f82a 	bl	80012d4 <__swsetup_r>
 8001280:	b118      	cbz	r0, 800128a <__swbuf_r+0x32>
 8001282:	f04f 37ff 	mov.w	r7, #4294967295
 8001286:	4638      	mov	r0, r7
 8001288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	6922      	ldr	r2, [r4, #16]
 800128e:	1a98      	subs	r0, r3, r2
 8001290:	6963      	ldr	r3, [r4, #20]
 8001292:	b2f6      	uxtb	r6, r6
 8001294:	4283      	cmp	r3, r0
 8001296:	4637      	mov	r7, r6
 8001298:	dc05      	bgt.n	80012a6 <__swbuf_r+0x4e>
 800129a:	4621      	mov	r1, r4
 800129c:	4628      	mov	r0, r5
 800129e:	f7ff ffb3 	bl	8001208 <_fflush_r>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d1ed      	bne.n	8001282 <__swbuf_r+0x2a>
 80012a6:	68a3      	ldr	r3, [r4, #8]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	60a3      	str	r3, [r4, #8]
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	6022      	str	r2, [r4, #0]
 80012b2:	701e      	strb	r6, [r3, #0]
 80012b4:	6962      	ldr	r2, [r4, #20]
 80012b6:	1c43      	adds	r3, r0, #1
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d004      	beq.n	80012c6 <__swbuf_r+0x6e>
 80012bc:	89a3      	ldrh	r3, [r4, #12]
 80012be:	07db      	lsls	r3, r3, #31
 80012c0:	d5e1      	bpl.n	8001286 <__swbuf_r+0x2e>
 80012c2:	2e0a      	cmp	r6, #10
 80012c4:	d1df      	bne.n	8001286 <__swbuf_r+0x2e>
 80012c6:	4621      	mov	r1, r4
 80012c8:	4628      	mov	r0, r5
 80012ca:	f7ff ff9d 	bl	8001208 <_fflush_r>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d0d9      	beq.n	8001286 <__swbuf_r+0x2e>
 80012d2:	e7d6      	b.n	8001282 <__swbuf_r+0x2a>

080012d4 <__swsetup_r>:
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	4b29      	ldr	r3, [pc, #164]	@ (800137c <__swsetup_r+0xa8>)
 80012d8:	4605      	mov	r5, r0
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	460c      	mov	r4, r1
 80012de:	b118      	cbz	r0, 80012e8 <__swsetup_r+0x14>
 80012e0:	6a03      	ldr	r3, [r0, #32]
 80012e2:	b90b      	cbnz	r3, 80012e8 <__swsetup_r+0x14>
 80012e4:	f7ff fa42 	bl	800076c <__sinit>
 80012e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012ec:	0719      	lsls	r1, r3, #28
 80012ee:	d422      	bmi.n	8001336 <__swsetup_r+0x62>
 80012f0:	06da      	lsls	r2, r3, #27
 80012f2:	d407      	bmi.n	8001304 <__swsetup_r+0x30>
 80012f4:	2209      	movs	r2, #9
 80012f6:	602a      	str	r2, [r5, #0]
 80012f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012fc:	81a3      	strh	r3, [r4, #12]
 80012fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001302:	e033      	b.n	800136c <__swsetup_r+0x98>
 8001304:	0758      	lsls	r0, r3, #29
 8001306:	d512      	bpl.n	800132e <__swsetup_r+0x5a>
 8001308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800130a:	b141      	cbz	r1, 800131e <__swsetup_r+0x4a>
 800130c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001310:	4299      	cmp	r1, r3
 8001312:	d002      	beq.n	800131a <__swsetup_r+0x46>
 8001314:	4628      	mov	r0, r5
 8001316:	f7ff fb31 	bl	800097c <_free_r>
 800131a:	2300      	movs	r3, #0
 800131c:	6363      	str	r3, [r4, #52]	@ 0x34
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001324:	81a3      	strh	r3, [r4, #12]
 8001326:	2300      	movs	r3, #0
 8001328:	6063      	str	r3, [r4, #4]
 800132a:	6923      	ldr	r3, [r4, #16]
 800132c:	6023      	str	r3, [r4, #0]
 800132e:	89a3      	ldrh	r3, [r4, #12]
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	81a3      	strh	r3, [r4, #12]
 8001336:	6923      	ldr	r3, [r4, #16]
 8001338:	b94b      	cbnz	r3, 800134e <__swsetup_r+0x7a>
 800133a:	89a3      	ldrh	r3, [r4, #12]
 800133c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001344:	d003      	beq.n	800134e <__swsetup_r+0x7a>
 8001346:	4621      	mov	r1, r4
 8001348:	4628      	mov	r0, r5
 800134a:	f000 f84f 	bl	80013ec <__smakebuf_r>
 800134e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001352:	f013 0201 	ands.w	r2, r3, #1
 8001356:	d00a      	beq.n	800136e <__swsetup_r+0x9a>
 8001358:	2200      	movs	r2, #0
 800135a:	60a2      	str	r2, [r4, #8]
 800135c:	6962      	ldr	r2, [r4, #20]
 800135e:	4252      	negs	r2, r2
 8001360:	61a2      	str	r2, [r4, #24]
 8001362:	6922      	ldr	r2, [r4, #16]
 8001364:	b942      	cbnz	r2, 8001378 <__swsetup_r+0xa4>
 8001366:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800136a:	d1c5      	bne.n	80012f8 <__swsetup_r+0x24>
 800136c:	bd38      	pop	{r3, r4, r5, pc}
 800136e:	0799      	lsls	r1, r3, #30
 8001370:	bf58      	it	pl
 8001372:	6962      	ldrpl	r2, [r4, #20]
 8001374:	60a2      	str	r2, [r4, #8]
 8001376:	e7f4      	b.n	8001362 <__swsetup_r+0x8e>
 8001378:	2000      	movs	r0, #0
 800137a:	e7f7      	b.n	800136c <__swsetup_r+0x98>
 800137c:	2000000c 	.word	0x2000000c

08001380 <_sbrk_r>:
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	4d06      	ldr	r5, [pc, #24]	@ (800139c <_sbrk_r+0x1c>)
 8001384:	2300      	movs	r3, #0
 8001386:	4604      	mov	r4, r0
 8001388:	4608      	mov	r0, r1
 800138a:	602b      	str	r3, [r5, #0]
 800138c:	f7ff f84c 	bl	8000428 <_sbrk>
 8001390:	1c43      	adds	r3, r0, #1
 8001392:	d102      	bne.n	800139a <_sbrk_r+0x1a>
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	b103      	cbz	r3, 800139a <_sbrk_r+0x1a>
 8001398:	6023      	str	r3, [r4, #0]
 800139a:	bd38      	pop	{r3, r4, r5, pc}
 800139c:	200001bc 	.word	0x200001bc

080013a0 <__swhatbuf_r>:
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	460c      	mov	r4, r1
 80013a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013a8:	2900      	cmp	r1, #0
 80013aa:	b096      	sub	sp, #88	@ 0x58
 80013ac:	4615      	mov	r5, r2
 80013ae:	461e      	mov	r6, r3
 80013b0:	da0d      	bge.n	80013ce <__swhatbuf_r+0x2e>
 80013b2:	89a3      	ldrh	r3, [r4, #12]
 80013b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013b8:	f04f 0100 	mov.w	r1, #0
 80013bc:	bf14      	ite	ne
 80013be:	2340      	movne	r3, #64	@ 0x40
 80013c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013c4:	2000      	movs	r0, #0
 80013c6:	6031      	str	r1, [r6, #0]
 80013c8:	602b      	str	r3, [r5, #0]
 80013ca:	b016      	add	sp, #88	@ 0x58
 80013cc:	bd70      	pop	{r4, r5, r6, pc}
 80013ce:	466a      	mov	r2, sp
 80013d0:	f000 f848 	bl	8001464 <_fstat_r>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	dbec      	blt.n	80013b2 <__swhatbuf_r+0x12>
 80013d8:	9901      	ldr	r1, [sp, #4]
 80013da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013e2:	4259      	negs	r1, r3
 80013e4:	4159      	adcs	r1, r3
 80013e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ea:	e7eb      	b.n	80013c4 <__swhatbuf_r+0x24>

080013ec <__smakebuf_r>:
 80013ec:	898b      	ldrh	r3, [r1, #12]
 80013ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013f0:	079d      	lsls	r5, r3, #30
 80013f2:	4606      	mov	r6, r0
 80013f4:	460c      	mov	r4, r1
 80013f6:	d507      	bpl.n	8001408 <__smakebuf_r+0x1c>
 80013f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80013fc:	6023      	str	r3, [r4, #0]
 80013fe:	6123      	str	r3, [r4, #16]
 8001400:	2301      	movs	r3, #1
 8001402:	6163      	str	r3, [r4, #20]
 8001404:	b003      	add	sp, #12
 8001406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001408:	ab01      	add	r3, sp, #4
 800140a:	466a      	mov	r2, sp
 800140c:	f7ff ffc8 	bl	80013a0 <__swhatbuf_r>
 8001410:	9f00      	ldr	r7, [sp, #0]
 8001412:	4605      	mov	r5, r0
 8001414:	4639      	mov	r1, r7
 8001416:	4630      	mov	r0, r6
 8001418:	f7ff fb1c 	bl	8000a54 <_malloc_r>
 800141c:	b948      	cbnz	r0, 8001432 <__smakebuf_r+0x46>
 800141e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001422:	059a      	lsls	r2, r3, #22
 8001424:	d4ee      	bmi.n	8001404 <__smakebuf_r+0x18>
 8001426:	f023 0303 	bic.w	r3, r3, #3
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	81a3      	strh	r3, [r4, #12]
 8001430:	e7e2      	b.n	80013f8 <__smakebuf_r+0xc>
 8001432:	89a3      	ldrh	r3, [r4, #12]
 8001434:	6020      	str	r0, [r4, #0]
 8001436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800143a:	81a3      	strh	r3, [r4, #12]
 800143c:	9b01      	ldr	r3, [sp, #4]
 800143e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001442:	b15b      	cbz	r3, 800145c <__smakebuf_r+0x70>
 8001444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001448:	4630      	mov	r0, r6
 800144a:	f000 f81d 	bl	8001488 <_isatty_r>
 800144e:	b128      	cbz	r0, 800145c <__smakebuf_r+0x70>
 8001450:	89a3      	ldrh	r3, [r4, #12]
 8001452:	f023 0303 	bic.w	r3, r3, #3
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	81a3      	strh	r3, [r4, #12]
 800145c:	89a3      	ldrh	r3, [r4, #12]
 800145e:	431d      	orrs	r5, r3
 8001460:	81a5      	strh	r5, [r4, #12]
 8001462:	e7cf      	b.n	8001404 <__smakebuf_r+0x18>

08001464 <_fstat_r>:
 8001464:	b538      	push	{r3, r4, r5, lr}
 8001466:	4d07      	ldr	r5, [pc, #28]	@ (8001484 <_fstat_r+0x20>)
 8001468:	2300      	movs	r3, #0
 800146a:	4604      	mov	r4, r0
 800146c:	4608      	mov	r0, r1
 800146e:	4611      	mov	r1, r2
 8001470:	602b      	str	r3, [r5, #0]
 8001472:	f7fe ffb3 	bl	80003dc <_fstat>
 8001476:	1c43      	adds	r3, r0, #1
 8001478:	d102      	bne.n	8001480 <_fstat_r+0x1c>
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	b103      	cbz	r3, 8001480 <_fstat_r+0x1c>
 800147e:	6023      	str	r3, [r4, #0]
 8001480:	bd38      	pop	{r3, r4, r5, pc}
 8001482:	bf00      	nop
 8001484:	200001bc 	.word	0x200001bc

08001488 <_isatty_r>:
 8001488:	b538      	push	{r3, r4, r5, lr}
 800148a:	4d06      	ldr	r5, [pc, #24]	@ (80014a4 <_isatty_r+0x1c>)
 800148c:	2300      	movs	r3, #0
 800148e:	4604      	mov	r4, r0
 8001490:	4608      	mov	r0, r1
 8001492:	602b      	str	r3, [r5, #0]
 8001494:	f7fe ffb1 	bl	80003fa <_isatty>
 8001498:	1c43      	adds	r3, r0, #1
 800149a:	d102      	bne.n	80014a2 <_isatty_r+0x1a>
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	b103      	cbz	r3, 80014a2 <_isatty_r+0x1a>
 80014a0:	6023      	str	r3, [r4, #0]
 80014a2:	bd38      	pop	{r3, r4, r5, pc}
 80014a4:	200001bc 	.word	0x200001bc

080014a8 <_init>:
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	bf00      	nop
 80014ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ae:	bc08      	pop	{r3}
 80014b0:	469e      	mov	lr, r3
 80014b2:	4770      	bx	lr

080014b4 <_fini>:
 80014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b6:	bf00      	nop
 80014b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ba:	bc08      	pop	{r3}
 80014bc:	469e      	mov	lr, r3
 80014be:	4770      	bx	lr
